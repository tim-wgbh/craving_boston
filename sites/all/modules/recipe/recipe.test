<?php
/**
 * @file
 * Tests for recipe.module.
 */

/**
 * Tests the functionality of the Recipe content type.
 */
class RecipeWebTestCase extends DrupalWebTestCase {
  protected $admin_user;
  protected $unit_list;

  public function setUp() {
    // Enable modules required for testing.
    parent::setUp(array('recipe', 'recipe_plaintext', 'recipe_html', 'recipe_recipeML', 'recipe_mastercook4'));

    // Create and log in the admin user with Recipe content permissions.
    $this->admin_user = $this->drupalCreateUser(array('create recipe content', 'edit any recipe content', 'import recipes', 'export recipes', 'administer site configuration', 'administer blocks'));
    $this->drupalLogin($this->admin_user);

    // Populate the unit list.
    $this->unit_list = recipe_get_units();
  }
}

/**
 * Tests the functionality of the Recipe content type and Recipe blocks.
 */
class RecipeNodeTestCase extends RecipeWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Recipe content type',
      'description' => 'Ensure that the recipe content type functions properly.',
      'group' => 'Recipe',
    );
  }

  /**
   * Creates a recipe node using the node form and test the module settings.
   */
  public function testRecipeContent() {
    // Generate values for our test node.
    $title = $this->randomName(16);
    $description = '<em>' . $this->randomName(255) . '</em>';
    $yield_unit = $this->randomName(10);
    $yield = 5;
    $source = '<a href="http://www.example.com">' . $this->randomName(16) . '</a>';
    $notes = '<em>' . $this->randomName(255) . '</em>';
    $instructions = '<em>' . $this->randomname(255) . '</em>';
    $preptime = 60;
    $cooktime = 135;

    // Ingredient with quantity == 1 and unit tablespoon with note.
    $ing_0_quantity = 1;
    $ing_0_unit = 'tablespoon';
    $ing_0_name = $this->randomName(16);
    $ing_0_note = $this->randomName(16);

    // Ingredient with quantity > 1 and unit tablespoon with note.
    $ing_1_quantity = 2;
    $ing_1_unit = 'tablespoon';
    $ing_1_name = $this->randomName(16);
    $ing_1_note = $this->randomName(16);

    // Ingredient with quantity == 0 and unit tablespoon with note.
    $ing_2_quantity = 0;
    $ing_2_unit = 'tablespoon';
    $ing_2_name = $this->randomName(16);
    $ing_2_note = $this->randomName(16);

    // Ingredient without note.
    $ing_3_quantity = 1;
    $ing_3_unit = 'tablespoon';
    $ing_3_name = $this->randomName(16);
    $ing_3_note = '';

    // Ingredient with unit that has no abbreviation.
    $ing_4_quantity = 10;
    $ing_4_unit = 'unit';
    $ing_4_name = $this->randomName(16);
    $ing_4_note = $this->randomName(16);

    // Ingredient with fractional quantity and unit tablespoon.
    $ing_5_quantity = '1/4';
    $ing_5_unit = 'tablespoon';
    $ing_5_name = $this->randomName(16);
    $ing_5_note = '';

    // Ingredient with mixed fractional quantity and unit tablespoon.
    $ing_6_quantity = '2 2/3';
    $ing_6_unit = 'tablespoon';
    $ing_6_name = $this->randomName(16);
    $ing_6_note = '';

    $edit = array(
      'title' => $title,
      'recipe_description[' . LANGUAGE_NONE . '][0][value]' => $description,
      'recipe_yield_unit' => $yield_unit,
      'recipe_yield' => $yield,
      'recipe_source[' . LANGUAGE_NONE . '][0][value]' => $source,
      'recipe_notes[' . LANGUAGE_NONE . '][0][value]' => $notes,
      'recipe_instructions[' . LANGUAGE_NONE . '][0][value]' => $instructions,
      'recipe_prep_time[' . LANGUAGE_NONE . '][0][value]' => $preptime,
      'recipe_cook_time[' . LANGUAGE_NONE . '][0][value]' => $cooktime,
      'recipe_ingredient[' . LANGUAGE_NONE . '][0][quantity]' => $ing_0_quantity,
      'recipe_ingredient[' . LANGUAGE_NONE . '][0][unit_key]' => $ing_0_unit,
      'recipe_ingredient[' . LANGUAGE_NONE . '][0][name]' => $ing_0_name,
      'recipe_ingredient[' . LANGUAGE_NONE . '][0][note]' => $ing_0_note,
      'recipe_ingredient[' . LANGUAGE_NONE . '][1][quantity]' => $ing_1_quantity,
      'recipe_ingredient[' . LANGUAGE_NONE . '][1][unit_key]' => $ing_1_unit,
      'recipe_ingredient[' . LANGUAGE_NONE . '][1][name]' => $ing_1_name,
      'recipe_ingredient[' . LANGUAGE_NONE . '][1][note]' => $ing_1_note,
      'recipe_ingredient[' . LANGUAGE_NONE . '][2][quantity]' => $ing_2_quantity,
      'recipe_ingredient[' . LANGUAGE_NONE . '][2][unit_key]' => $ing_2_unit,
      'recipe_ingredient[' . LANGUAGE_NONE . '][2][name]' => $ing_2_name,
      'recipe_ingredient[' . LANGUAGE_NONE . '][2][note]' => $ing_2_note,
      'recipe_ingredient[' . LANGUAGE_NONE . '][3][quantity]' => $ing_3_quantity,
      'recipe_ingredient[' . LANGUAGE_NONE . '][3][unit_key]' => $ing_3_unit,
      'recipe_ingredient[' . LANGUAGE_NONE . '][3][name]' => $ing_3_name,
      'recipe_ingredient[' . LANGUAGE_NONE . '][3][note]' => $ing_3_note,
      'recipe_ingredient[' . LANGUAGE_NONE . '][4][quantity]' => $ing_4_quantity,
      'recipe_ingredient[' . LANGUAGE_NONE . '][4][unit_key]' => $ing_4_unit,
      'recipe_ingredient[' . LANGUAGE_NONE . '][4][name]' => $ing_4_name,
      'recipe_ingredient[' . LANGUAGE_NONE . '][4][note]' => $ing_4_note,
      'recipe_ingredient[' . LANGUAGE_NONE . '][5][quantity]' => $ing_5_quantity,
      'recipe_ingredient[' . LANGUAGE_NONE . '][5][unit_key]' => $ing_5_unit,
      'recipe_ingredient[' . LANGUAGE_NONE . '][5][name]' => $ing_5_name,
      'recipe_ingredient[' . LANGUAGE_NONE . '][5][note]' => $ing_5_note,
      'recipe_ingredient[' . LANGUAGE_NONE . '][6][quantity]' => $ing_6_quantity,
      'recipe_ingredient[' . LANGUAGE_NONE . '][6][unit_key]' => $ing_6_unit,
      'recipe_ingredient[' . LANGUAGE_NONE . '][6][name]' => $ing_6_name,
      'recipe_ingredient[' . LANGUAGE_NONE . '][6][note]' => $ing_6_note,
    );

    $this->drupalGet('node/add/recipe');
    // Add six recipe_ingredient widgets.
    $this->drupalPost(NULL, array(), t('Add another item'));
    $this->drupalPost(NULL, array(), t('Add another item'));
    $this->drupalPost(NULL, array(), t('Add another item'));
    $this->drupalPost(NULL, array(), t('Add another item'));
    $this->drupalPost(NULL, array(), t('Add another item'));
    $this->drupalPost(NULL, array(), t('Add another item'));
    // Post the values to the node form.
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertText(t('Recipe @title has been created.', array('@title' => $title)));

    // Check the page for the recipe content.
    $this->assertRaw($description, 'Found the recipe description.');
    $this->assertFieldById('edit-custom-yield', $yield, 'Found the recipe yield in the custom yield form.');
    $this->assertText($yield_unit, 'Found the recipe yield unit.');
    $this->assertRaw($source, 'Found the recipe source.');
    $this->assertRaw($notes, 'Found the recipe notes.');
    $this->assertRaw($instructions, 'Found the recipe instructions');
    $this->assertText('1 hour', 'Found the recipe prep time.');
    $this->assertText('2 hours, 15 minutes', 'Found the recipe cook time.');
    $this->assertText('3 hours, 15 minutes', 'Found the recipe total time.');

    $this->assertText(t('@quantity @unit', array('@quantity' => $ing_0_quantity, '@unit' => $this->unit_list[$ing_0_unit]['abbreviation'])), 'Found ingredient 0 quantity and abbreviation.');
    $this->assertText(format_string('@name (@note)', array('@name' => $ing_0_name, '@note' => $ing_0_note)), 'Found ingredient 0 name and note.');

    $this->assertText(t('@quantity @unit', array('@quantity' => $ing_1_quantity, '@unit' => $this->unit_list[$ing_1_unit]['abbreviation'])), 'Found ingredient 1 quantity and abbreviation.');
    $this->assertText(format_string('@name (@note)', array('@name' => $ing_1_name, '@note' => $ing_1_note)), 'Found ingredient 1 name and note.');

    $this->assertNoText(t('@quantity @unit', array('@quantity' => $ing_2_quantity, '@unit' => $this->unit_list[$ing_2_unit]['abbreviation'])), 'Did not find ingredient 2 quantity == 0.');
    $this->assertText(format_string('@name (@note)', array('@name' => $ing_2_name, '@note' => $ing_2_note)), 'Found ingredient 2 name and note.');

    $this->assertText(t('@quantity @unit', array('@quantity' => $ing_3_quantity, '@unit' => $this->unit_list[$ing_3_unit]['abbreviation'])), 'Found ingredient 3 quantity and abbreviation.');
    $this->assertNoText(format_string('@name (@note)', array('@name' => $ing_3_name, '@note' => $ing_3_note)), 'Did not find ingredient 3 name with blank note field, "()".');

    $this->assertRaw(format_string('<span class="quantity-unit" property="schema:amount"> @quantity </span>', array('@quantity' => $ing_4_quantity)), 'Found ingredient 4 quantity with no unit.');
    $this->assertText(format_string('@name (@note)', array('@name' => $ing_4_name, '@note' => $ing_4_note)), 'Found ingredient 4 name and note.');

    $this->assertRaw(str_replace('/', '&frasl;', $ing_5_quantity), 'Found ingredient 5 quantity.');

    $this->assertRaw(str_replace('/', '&frasl;', $ing_6_quantity), 'Found ingredient 6 quantity.');

    // Check the page HTML for the recipe RDF properties.
    $properties = array(
      'schema:Recipe',
      'schema:name',
      'schema:instructions',
      'schema:summary',
      'schema:prepTime',
      'schema:cookTime',
      'schema:totalTime',
      // @todo 'schema:yield' is defined in recipe_rdf_mapping(), but is not
      // currently implemented in any theme function.
      //'schema:yield',
    );
    foreach ($properties as $property) {
      $this->assertRaw($property, format_string('Found the RDF property "@property" in the recipe node HTML.', array('@property' => $property)));
    }

    // Check the page HTML for the ISO 8601 recipe durations.
    $durations = array(
      'prep_time' => 'PT1H',
      'cook_time' => 'PT2H15M',
      'total_time' => 'PT3H15M',
    );
    foreach ($durations as $duration) {
      $this->assertRaw($duration, format_string('Found the ISO 8601 duration "@duration" in the recipe node HTML.', array('@duration' => $duration)));
    }

    // Change the ingredient field settings.
    $instance = field_read_instance('node', 'recipe_ingredient', 'recipe');
    // Enable full unit name display.
    $instance['display']['default']['settings']['unit_abbreviation'] = 1;
    field_update_instance($instance);

    // Change the Recipe module settings.
    $summary_title = $this->randomName(16);
    $edit = array(
      // Hide the recipe summary.
      // @todo The recipe summary location setting currently does nothing.
      //'recipe_summary_location' => 2,
      // Change the Summary block title.
      'recipe_summary_title' => $summary_title,
    );

    // Post the values to the settings form.
    $this->drupalPost('admin/config/content/recipe', $edit, t('Save configuration'));

    // Check the recipe node display again.
    $this->drupalGet('node/1');

    $this->assertText(t('@quantity @unit', array('@quantity' => $ing_0_quantity, '@unit' => $this->unit_list[$ing_0_unit]['name'])), 'Found ingredient 0 quantity and singular unit name.');

    $this->assertText(t('@quantity @unit', array('@quantity' => $ing_1_quantity, '@unit' => $this->unit_list[$ing_1_unit]['plural'])), 'Found ingredient 1 quantity and plural unit name.');

    //$this->assertNoText(t('Summary'), 'Did not find the recipe summary.');

    // Enable the Newest Recipes and Recipe Summary blocks.
    // Check for it and the node link.
    $edit = array(
      "blocks[recipe_recent][region]" => 'sidebar_first',
      "blocks[recipe_summary][region]" => 'sidebar_first',
    );
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    $this->assertText(t('Newest recipes'), 'Found the Newest recipes block.');
    $this->assertLink($title, 0);
    // Make sure the Summary block doesn't appear on a non-recipe-node page.
    $this->assertNoText($summary_title, 'Did not find the altered Summary block title.');

    // Check for the Summary block on the recipe node page.
    $this->drupalGet('node/1');
    $this->assertText($summary_title, 'Found the altered Summary block title.');

    // Test ingredient autocomplete for the first ingredient.
    $input = substr($ing_0_name, 0, 3);
    $this->drupalGet('recipe/ingredient/autocomplete/' . $input);
    $this->assertRaw('{"' . $ing_0_name . '":"' . $ing_0_name . '"}', format_string('Autocomplete returns ingredient %ingredient_name after typing the first 3 letters.', array('%ingredient_name' => $ing_0_name)));

    // Test the export formats.
    // Check that the export format links are displayed on the recipe node page.
    $this->drupalGet('node/1');
    $this->assertLink('Print View', 0);
    $this->assertLink('MasterCook4', 0);
    $this->assertLink('Plain Text', 0);
    $this->assertLink('recipeML', 0);

    // Check for the recipe data on the HTML export page.
    $this->drupalGet('recipe/export/recipeprint/1/' . $yield);
    $this->assertRaw($description, 'Found the recipe description.');
    // The HTML format does not output the yield.
    // The HTML format does not output the yield unit.
    $this->assertRaw($source, 'Found the recipe source.');
    $this->assertRaw($notes, 'Found the recipe notes.');
    $this->assertRaw($instructions, 'Found the recipe instructions');
    $this->assertRaw('1 hour', 'Found the recipe prep time.');
    $this->assertRaw('2 hours, 15 minutes', 'Found the recipe cook time.');
    $this->assertRaw('3 hours, 15 minutes', 'Found the recipe total time.');

    $this->assertRaw(format_string('@quantity @unit', array('@quantity' => $ing_0_quantity, '@unit' => $this->unit_list[$ing_0_unit]['name'])), 'Found ingredient 0 quantity and unit name.');
    $this->assertRaw(format_string('@name (@note)', array('@name' => $ing_0_name, '@note' => $ing_0_note)), 'Found ingredient 0 name and note.');

    $this->assertRaw(format_string('@quantity @unit', array('@quantity' => $ing_1_quantity, '@unit' => $this->unit_list[$ing_1_unit]['plural'])), 'Found ingredient 1 quantity and unit plural name.');
    $this->assertRaw(format_string('@name (@note)', array('@name' => $ing_1_name, '@note' => $ing_1_note)), 'Found ingredient 1 name and note.');

    $this->assertRaw(format_string('!quantity @unit', array('!quantity' => '&nbsp;', '@unit' => $this->unit_list[$ing_2_unit]['name'])), 'Found ingredient 2 unit name.');
    $this->assertRaw(format_string('@name (@note)', array('@name' => $ing_2_name, '@note' => $ing_2_note)), 'Found ingredient 2 name and note.');

    $this->assertRaw(format_string('@quantity @unit', array('@quantity' => $ing_3_quantity, '@unit' => $this->unit_list[$ing_3_unit]['name'])), 'Found ingredient 3 quantity and unit name.');
    $this->assertRaw($ing_3_name, 'Found ingredient 3 name.');

    $this->assertRaw(format_string('<span class="quantity-unit" property="schema:amount"> @quantity </span>', array('@quantity' => $ing_4_quantity)), 'Found ingredient 4 quantity and with no unit.');
    $this->assertRaw(format_string('@name (@note)', array('@name' => $ing_4_name, '@note' => $ing_4_note)), 'Found ingredient 4 name and note.');

    // Check for the recipe data on the MasterCook4 export page.
    $this->drupalGet('recipe/export/mastercook4/1/' . $yield);
    $this->assertRaw(format_string('DESCRIPTION : @description', array('@description' => filter_xss($description, array()))), 'Found the recipe description.');
    $this->assertRaw(format_string('Serving Size  : @yield', array('@yield' => $yield)), 'Found the recipe yield.');
    // The MasterCook4 format does not output the yield unit.
    $this->assertRaw(format_string('Recipe By     : @source', array('@source' => filter_xss($source, array()))), 'Found the recipe source.');
    $this->assertRaw(filter_xss($notes, array()), 'Found the recipe notes.');
    $this->assertRaw(filter_xss($instructions, array()), 'Found the recipe instructions');
    $this->assertRaw('Preparation Time : 1:00', 'Found the recipe prep time.');
    // The MasterCook4 format does not output the cook time.
    // The MasterCook4 format does not output the total time.
    $this->assertRaw(format_string('@quantity  @unit    @name -- @note', array('@quantity' => $ing_0_quantity, '@unit' => $this->unit_list[$ing_0_unit]['name'], '@name' => $ing_0_name, '@note' => $ing_0_note)), 'Found ingredient 0.');
    $this->assertRaw(format_string('@quantity  @unit   @name -- @note', array('@quantity' => $ing_1_quantity, '@unit' => $this->unit_list[$ing_1_unit]['plural'], '@name' => $ing_1_name, '@note' => $ing_1_note)), 'Found ingredient 1.');
    $this->assertRaw(format_string('   @unit    @name -- @note', array('@unit' => $this->unit_list[$ing_2_unit]['name'], '@name' => $ing_2_name, '@note' => $ing_2_note)), 'Found ingredient 2.');
    $this->assertRaw(format_string('@quantity  @unit    @name', array('@quantity' => $ing_3_quantity, '@unit' => $this->unit_list[$ing_3_unit]['name'], '@name' => $ing_3_name)), 'Found ingredient 3.');
    $this->assertRaw(format_string('@quantity                @name -- @note', array('@quantity' => $ing_4_quantity, '@name' => $ing_4_name, '@note' => $ing_4_note)), 'Found ingredient 4.');

    // Check for the recipe data on the plain text export page.
    $this->drupalGet('recipe/export/plaintext/1/' . $yield);
    $this->assertRaw(filter_xss($description, array()), 'Found the recipe description.');
    // The plain text format does not output the yield.
    // The plain text format does not output the yield unit.
    // The plain text format does not output the source.
    $this->assertRaw(filter_xss($notes, array()), 'Found the recipe notes.');
    $this->assertRaw(filter_xss($instructions, array()), 'Found the recipe instructions');
    // The plain text format does not output the prep time.
    // The plain text format does not output the cook time.
    // The plain text format does not output the total time.
    $this->assertRaw(format_string('@quantity @unit  @name (@note)', array('@quantity' => $ing_0_quantity, '@unit' => $this->unit_list[$ing_0_unit]['name'], '@name' => $ing_0_name, '@note' => $ing_0_note)), 'Found ingredient 0.');
    $this->assertRaw(format_string('@quantity @unit @name (@note)', array('@quantity' => $ing_1_quantity, '@unit' => $this->unit_list[$ing_1_unit]['plural'], '@name' => $ing_1_name, '@note' => $ing_1_note)), 'Found ingredient 1.');
    $this->assertRaw(format_string('   @unit  @name (@note)', array('@unit' => $this->unit_list[$ing_2_unit]['name'], '@name' => $ing_2_name, '@note' => $ing_2_note)), 'Found ingredient 2.');
    $this->assertRaw(format_string('@quantity @unit  @name', array('@quantity' => $ing_3_quantity, '@unit' => $this->unit_list[$ing_3_unit]['name'], '@name' => $ing_3_name)), 'Found ingredient 3.');
    $this->assertRaw(format_string('@quantity             @name (@note)', array('@quantity' => $ing_4_quantity, '@name' => $ing_4_name, '@note' => $ing_4_note)), 'Found ingredient 4.');

    // Check for the recipe data on the recipeML export page.
    $this->drupalGet('recipe/export/recipeml/1/' . $yield);
    $this->assertRaw(format_string('<description>@description</description>', array('@description' => filter_xss($description, array()))), 'Found the recipe description.');
    $this->assertRaw(format_string('<yield><qty>@yield</qty><unit>@yield_unit</unit></yield>', array('@yield' => $yield, '@yield_unit' => $yield_unit)), 'Found the recipe yield and yield unit.');
    $this->assertRaw(format_string('<source>@source</source>', array('@source' => filter_xss($source, array()))), 'Found the recipe source.');
    $this->assertRaw(format_string('<note>@notes</note>', array('@notes' => filter_xss($notes, array()))), 'Found the recipe notes.');
    $this->assertRaw(format_string('<directions>@instructions</directions>', array('@instructions' => filter_xss($instructions, array()))), 'Found the recipe instructions');
    $this->assertRaw(format_string('<preptime type="cooking"><time><qty>@preptime</qty><timeunit>minutes</timeunit></time></preptime>', array('@preptime' => $preptime)), 'Found the recipe prep time.');
    // The recipeML format does not output the cook time.
    // The recipeML format does not output the total time.
    $this->assertRaw(format_string('<ing><amt><qty>@quantity</qty><unit>@unit</unit></amt><item>@name</item><prep>@note</prep></ing>', array('@quantity' => $ing_0_quantity, '@unit' => $this->unit_list[$ing_0_unit]['name'], '@name' => $ing_0_name, '@note' => $ing_0_note)), 'Found ingredient 0.');
    $this->assertRaw(format_string('<ing><amt><qty>@quantity</qty><unit>@unit</unit></amt><item>@name</item><prep>@note</prep></ing>', array('@quantity' => $ing_1_quantity, '@unit' => $this->unit_list[$ing_1_unit]['plural'], '@name' => $ing_1_name, '@note' => $ing_1_note)), 'Found ingredient 1.');
    $this->assertRaw(format_string('<ing><amt><qty>@quantity</qty><unit>@unit</unit></amt><item>@name</item><prep>@note</prep></ing>', array('@quantity' => $ing_2_quantity, '@unit' => $this->unit_list[$ing_2_unit]['name'], '@name' => $ing_2_name, '@note' => $ing_2_note)), 'Found ingredient 2.');
    $this->assertRaw(format_string('<ing><amt><qty>@quantity</qty><unit>@unit</unit></amt><item>@name</item></ing>', array('@quantity' => $ing_3_quantity, '@unit' => $this->unit_list[$ing_3_unit]['name'], '@name' => $ing_3_name, '@note' => $ing_0_note)), 'Found ingredient 3.');
    $this->assertRaw(format_string('<ing><amt><qty>@quantity</qty><unit> </unit></amt><item>@name</item><prep>@note</prep></ing>', array('@quantity' => $ing_4_quantity, '@name' => $ing_4_name, '@note' => $ing_4_note)), 'Found ingredient 4.');

    // Check for the description in the teaser view at /node.
    $this->drupalGet('node');
    $this->assertRaw($description, 'Found the recipe description.');

    // Check for fractional quantities when editing the node.
    $this->drupalGet('node/1/edit');
    $this->assertFieldById('edit-recipe-ingredient-' . LANGUAGE_NONE . '-5-quantity', $ing_5_quantity, 'Found fractional quantity in the 5th ingredient field on the node edit form.');
    $this->assertFieldById('edit-recipe-ingredient-' . LANGUAGE_NONE . '-6-quantity', $ing_6_quantity, 'Found fractional quantity in the 6th ingredient field on the node edit form.');
  }

  /**
   * Tests exporting recipes with the multiple export page.
   */
  public function testRecipeMultipleExport() {
    // Create two recipe nodes.
    $node_title_1 = $this->randomName(16);
    $source_1 = $this->randomName(16);
    $yield_1 = 10;
    $yield_unit_1 = $this->randomName(10);
    $description_1 = $this->randomName(32);
    $instructions_1 = $this->randomName(32);
    $notes_1 = $this->randomName(32);
    $preptime_1 = 30;
    $cooktime_1 = 90;
    $quantity_1 = 2;
    $unit_key_1 = 'cup';
    $ingredient_name_1 = $this->randomName(16);
    $ingredient_note_1 = $this->randomName(16);
    $edit = array(
      'type' => 'recipe',
      'title' => $node_title_1,
      'recipe_source' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $source_1,
          ),
        ),
      ),
      'recipe_yield' => $yield_1,
      'recipe_yield_unit' => $yield_unit_1,
      'recipe_description' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $description_1,
          ),
        ),
      ),
      'recipe_instructions' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $instructions_1,
          ),
        ),
      ),
      'recipe_notes' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $notes_1,
          ),
        ),
      ),
      'recipe_prep_time' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $preptime_1,
          ),
        ),
      ),
      'recipe_cook_time' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $cooktime_1,
          ),
        ),
      ),
      'recipe_ingredient' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'iid' => recipe_ingredient_id_from_name($ingredient_name_1),
            'quantity' => $quantity_1,
            'unit_key' => $unit_key_1,
            'note' => $ingredient_note_1,
          ),
        ),
      ),
    );
    $this->drupalCreateNode($edit);

    $node_title_2 = $this->randomName(16);
    $source_2 = $this->randomName(16);
    $yield_2 = 10;
    $yield_unit_2 = $this->randomName(10);
    $description_2 = $this->randomName(32);
    $instructions_2 = $this->randomName(32);
    $notes_2 = $this->randomName(32);
    $preptime_2 = 15;
    $cooktime_2 = 45;
    $quantity_2 = 2;
    $unit_key_2 = 'cup';
    $ingredient_name_2 = $this->randomName(16);
    $ingredient_note_2 = $this->randomName(16);
    $edit = array(
      'type' => 'recipe',
      'title' => $node_title_2,
      'recipe_source' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $source_2,
          ),
        ),
      ),
      'recipe_yield' => $yield_2,
      'recipe_yield_unit' => $yield_unit_2,
      'recipe_description' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $description_2,
          ),
        ),
      ),
      'recipe_instructions' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $instructions_2,
          ),
        ),
      ),
      'recipe_notes' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $notes_2,
          ),
        ),
      ),
      'recipe_prep_time' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $preptime_2,
          ),
        ),
      ),
      'recipe_cook_time' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $cooktime_2,
          ),
        ),
      ),
      'recipe_ingredient' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'iid' => recipe_ingredient_id_from_name($ingredient_name_2),
            'quantity' => $quantity_2,
            'unit_key' => $unit_key_2,
            'note' => $ingredient_note_2,
          ),
        ),
      ),
    );
    $this->drupalCreateNode($edit);

    // Check for links to all the export formats on the bulk export page.
    $this->drupalGet('admin/structure/recipe');
    $this->assertLink('MasterCook4');
    $this->assertLink('Plain Text');
    $this->assertLink('recipeML');

    // Check for the recipe data on the MasterCook4 bulk export page.
    $this->drupalGet('admin/structure/recipe/export_multi/mastercook4');
    $this->assertRaw($node_title_1);
    // The MasterCook4 format does not output the description.
    $this->assertRaw(format_string('Serving Size  : @yield', array('@yield' => $yield_1)), 'Found the recipe yield.');
    // The MasterCook4 format does not output the yield unit.
    $this->assertRaw(format_string('Recipe By     : @source', array('@source' => $source_1)), 'Found the recipe source.');
    $this->assertRaw($notes_1, 'Found the recipe notes.');
    $this->assertRaw($instructions_1, 'Found the recipe instructions');
    $this->assertRaw('Preparation Time : 0:30', 'Found the recipe prep time.');
    // The MasterCook4 format does not output the cook time.
    // The MasterCook4 format does not output the total time.
    $this->assertRaw(format_string('@quantity  @unit             @name -- @note', array('@quantity' => $quantity_1, '@unit' => $this->unit_list[$unit_key_1]['abbreviation'], '@name' => $ingredient_name_1, '@note' => $ingredient_note_1)), 'Found ingredient 0.');

    $this->assertRaw($node_title_2);
    // The MasterCook4 format does not output the description.
    $this->assertRaw(format_string('Serving Size  : @yield', array('@yield' => $yield_2)), 'Found the recipe yield.');
    // The MasterCook4 format does not output the yield unit.
    $this->assertRaw(format_string('Recipe By     : @source', array('@source' => $source_2)), 'Found the recipe source.');
    $this->assertRaw($notes_2, 'Found the recipe notes.');
    $this->assertRaw($instructions_2, 'Found the recipe instructions');
    $this->assertRaw('Preparation Time : 0:15', 'Found the recipe prep time.');
    // The MasterCook4 format does not output the cook time.
    // The MasterCook4 format does not output the total time.
    $this->assertRaw(format_string('@quantity  @unit             @name -- @note', array('@quantity' => $quantity_2, '@unit' => $this->unit_list[$unit_key_2]['abbreviation'], '@name' => $ingredient_name_2, '@note' => $ingredient_note_2)), 'Found ingredient 0.');

    // Check for the recipe data on the plain text export page.
    $this->drupalGet('admin/structure/recipe/export_multi/plaintext');
    $this->assertRaw($node_title_1);
    $this->assertRaw($description_1, 'Found the recipe description.');
    // The plain text format does not output the yield.
    // The plain text format does not output the yield unit.
    // The plain text format does not output the source.
    $this->assertRaw($notes_1, 'Found the recipe notes.');
    $this->assertRaw($instructions_1, 'Found the recipe instructions');
    // The plain text format does not output the prep time.
    // The plain text format does not output the cook time.
    // The plain text format does not output the total time.
    $this->assertRaw(format_string('@quantity @unit @name (@note)', array('@quantity' => $quantity_1, '@unit' => $this->unit_list[$unit_key_1]['abbreviation'], '@name' => $ingredient_name_1, '@note' => $ingredient_note_1)), 'Found ingredient 0.');

    $this->assertRaw($node_title_2);
    $this->assertRaw($description_2, 'Found the recipe description.');
    // The plain text format does not output the yield.
    // The plain text format does not output the yield unit.
    // The plain text format does not output the source.
    $this->assertRaw($notes_2, 'Found the recipe notes.');
    $this->assertRaw($instructions_2, 'Found the recipe instructions');
    // The plain text format does not output the prep time.
    // The plain text format does not output the cook time.
    // The plain text format does not output the total time.
    $this->assertRaw(format_string('@quantity @unit @name (@note)', array('@quantity' => $quantity_2, '@unit' => $this->unit_list[$unit_key_2]['abbreviation'], '@name' => $ingredient_name_2, '@note' => $ingredient_note_2)), 'Found ingredient 0.');

    // Check for the recipe data on the recipeML export page.
    $this->drupalGet('admin/structure/recipe/export_multi/recipeml');
    $this->assertRaw($node_title_1);
    $this->assertRaw(format_string('<description>@description</description>', array('@description' => $description_1)), 'Found the recipe description.');
    $this->assertRaw(format_string('<yield><qty>@yield</qty><unit>@yield_unit</unit></yield>', array('@yield' => $yield_1, '@yield_unit' => $yield_unit_1)), 'Found the recipe yield and yield unit.');
    $this->assertRaw(format_string('<source>@source</source>', array('@source' => $source_1)), 'Found the recipe source.');
    $this->assertRaw(format_string('<note>@notes</note>', array('@notes' => $notes_1)), 'Found the recipe notes.');
    $this->assertRaw(format_string('<directions>@instructions</directions>', array('@instructions' => $instructions_1)), 'Found the recipe instructions');
    $this->assertRaw(format_string('<preptime type="cooking"><time><qty>@preptime</qty><timeunit>minutes</timeunit></time></preptime>', array('@preptime' => $preptime_1)), 'Found the recipe prep time.');
    // The recipeML format does not output the cook time.
    // The recipeML format does not output the total time.
    $this->assertRaw(format_string('<ing><amt><qty>@quantity</qty><unit>@unit</unit></amt><item>@name</item><prep>@note</prep></ing>', array('@quantity' => $quantity_1, '@unit' => $this->unit_list[$unit_key_1]['abbreviation'], '@name' => $ingredient_name_1, '@note' => $ingredient_note_1)), 'Found ingredient 0.');

    $this->assertRaw($node_title_2);
    $this->assertRaw(format_string('<description>@description</description>', array('@description' => $description_2)), 'Found the recipe description.');
    $this->assertRaw(format_string('<yield><qty>@yield</qty><unit>@yield_unit</unit></yield>', array('@yield' => $yield_2, '@yield_unit' => $yield_unit_2)), 'Found the recipe yield and yield unit.');
    $this->assertRaw(format_string('<source>@source</source>', array('@source' => $source_2)), 'Found the recipe source.');
    $this->assertRaw(format_string('<note>@notes</note>', array('@notes' => $notes_2)), 'Found the recipe notes.');
    $this->assertRaw(format_string('<directions>@instructions</directions>', array('@instructions' => $instructions_2)), 'Found the recipe instructions');
    $this->assertRaw(format_string('<preptime type="cooking"><time><qty>@preptime</qty><timeunit>minutes</timeunit></time></preptime>', array('@preptime' => $preptime_2)), 'Found the recipe prep time.');
    // The recipeML format does not output the cook time.
    // The recipeML format does not output the total time.
    $this->assertRaw(format_string('<ing><amt><qty>@quantity</qty><unit>@unit</unit></amt><item>@name</item><prep>@note</prep></ing>', array('@quantity' => $quantity_2, '@unit' => $this->unit_list[$unit_key_2]['abbreviation'], '@name' => $ingredient_name_2, '@note' => $ingredient_note_2)), 'Found ingredient 0.');
  }
}

/**
 * Tests the custom yield form in a recipe node.
 */
class RecipeYieldFormTestCase extends RecipeWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Recipe yield form',
      'description' => 'Test the custom yield form in a recipe node.',
      'group' => 'Recipe',
    );
  }

  /**
   * Tests the custom yield form functionality.
   *
   * This test only verifies that the form is capable of altering the yield and
   * ingredient quantities.  Issues with values returned by ingredient quantity
   * conversion can be tested in RecipeUnitTestCase.
   */
  public function testRecipeYieldForm() {
    // Create a recipe node.
    $node_title = $this->randomName(16);
    $yield = 10;
    $quantity = 2;
    $unit_key = 'cup';
    $ingredient_name = $this->randomName(16);
    $edit = array(
      'type' => 'recipe',
      'title' => $node_title,
      'recipe_source' => array(
        'value' => '',
      ),
      'recipe_yield' => $yield,
      'recipe_yield_unit' => '',
      'recipe_description' => array(
        'value' => '',
      ),
      'recipe_instructions' => array(
        'value' => '',
      ),
      'recipe_notes' => array(
        'value' => '',
      ),
      'recipe_prep_time' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => 1,
          ),
        ),
      ),
      'recipe_cook_time' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => 1,
          ),
        ),
      ),
      'recipe_ingredient' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'iid' => recipe_ingredient_id_from_name($ingredient_name),
            'quantity' => $quantity,
            'unit_key' => $unit_key,
            'note' => '',
          ),
        ),
      ),
    );
    $this->drupalCreateNode($edit);

    // Go to the recipe node and verify the yield and quantity values.
    $this->drupalGet('node/1');
    $this->assertFieldById('edit-custom-yield', $yield, 'Found the recipe yield in the custom yield form.');
    $this->assertText(format_string('@quantity @unit', array('@quantity' => $quantity, '@unit' => $this->unit_list[$unit_key]['abbreviation'])), 'Found the recipe quantity.');

    // Use the custom yield form to halve the yield and check for new values.
    $this->drupalPost(NULL, NULL, 'Halve');
    $this->assertFieldById('edit-custom-yield', $yield / 2, 'Found the halved recipe yield in the custom yield form.');
    $this->assertText(format_string('@quantity @unit', array('@quantity' => $quantity / 2, '@unit' => $this->unit_list[$unit_key]['abbreviation'])), 'Found the halved recipe quantity.');

    // Use the custom yield form to reset the values.
    $this->drupalPost(NULL, NULL, 'Reset');
    $this->assertFieldById('edit-custom-yield', $yield, 'Found the recipe yield in the custom yield form.');
    $this->assertText(format_string('@quantity @unit', array('@quantity' => $quantity, '@unit' => $this->unit_list[$unit_key]['abbreviation'])), 'Found the recipe quantity.');

    // Use the custom yield form to double the yield and check for new values.
    $this->drupalPost(NULL, NULL, 'Double');
    $this->assertFieldById('edit-custom-yield', $yield * 2, 'Found the doubled recipe yield in the custom yield form.');
    $this->assertText(format_string('@quantity @unit', array('@quantity' => $quantity * 2, '@unit' => $this->unit_list[$unit_key]['abbreviation'])), 'Found the doubled recipe quantity.');

    // Use the custom yield form to triple the yield and check for new values.
    $edit = array('custom_yield' => $yield * 3);
    $this->drupalPost(NULL, $edit, 'Change');
    $this->assertFieldById('edit-custom-yield', $yield * 3, 'Found the tripled recipe yield in the custom yield form.');
    $this->assertText(format_string('@quantity @unit', array('@quantity' => $quantity * 3, '@unit' => $this->unit_list[$unit_key]['abbreviation'])), 'Found the tripled recipe quantity.');
  }
}

/**
 * Tests the functionality of the ingredient field settings.
 */
class RecipeIngredientSettingsTestCase extends RecipeWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Recipe ingredient settings',
      'description' => 'Ensure that the ingredient field settings function properly.',
      'group' => 'Recipe',
    );
  }

  public function setUp() {
    // Enable modules required for testing.
    parent::setUp(array('recipe'));

    // Create a new content type for testing.
    $content_type = $this->drupalCreateContentType(array('type' => 'test_bundle'));

    // Create and log in the admin user with Recipe content permissions.
    $this->admin_user = $this->drupalCreateUser(array('create test_bundle content', 'administer site configuration'));
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Tests ingredient field settings.
   */
  public function testIngredientFieldSettings() {
    // Create the field.
    $field = array(
      'cardinality' => -1,
      'field_name' => 'ingredient',
      'module' => 'recipe',
      'settings' => array(
        'ingredient_name_normalize' => 1,
      ),
      'type' => 'ingredient_reference',
    );
    field_create_field($field);

    // Create the field instance.
    $instance = array(
      'bundle' => 'test_bundle',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'recipe',
          'settings' => array(
            'fraction_format' => '{%d }%d&frasl;%d',
            'unit_abbreviation' => 0,
          ),
          'type' => 'recipe_ingredient_default',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'ingredient',
      'label' => 'Ingredients',
      'widget' => array(
        'active' => 0,
        'module' => 'recipe',
        'settings' => array(
          'default_unit' => 'cup',
        ),
        'type' => 'recipe_ingredient_autocomplete',
        'weight' => 0,
      ),
    );
    field_create_instance($instance);

    $edit = array(
      'title' => $this->randomName(16),
      'ingredient[' . LANGUAGE_NONE . '][0][quantity]' => 4,
      'ingredient[' . LANGUAGE_NONE . '][0][unit_key]' => 'us gallon',
      'ingredient[' . LANGUAGE_NONE . '][0][name]' => 'TeSt InGrEdIeNt',
      'ingredient[' . LANGUAGE_NONE . '][0][note]' => '',
    );

    $this->drupalGet('node/add/test_bundle');
    // Assert that the default element, 'cup', is selected.
    $this->assertOptionSelected('edit-ingredient-und-0-unit-key', 'cup', 'The default unit was selected.');
    // Post the values to the node form.
    $this->drupalPost(NULL, $edit, t('Save'));

    // Assert that the normalized ingredient name can be found on the node page.
    $this->assertText('test ingredient', 'Found the normalized ingredient name.');
  }
}

/**
 * Tests the Recipe module landing page at /recipe.
 */
class RecipeLandingPageTestCase extends RecipeWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Recipe landing page',
      'description' => 'Test the content on the Recipe module landing page.',
      'group' => 'Recipe',
    );
  }

  /**
   * Tests the content displayed on the Recipe module landing page.
   */
  public function testRecipeLandingPage() {
    // While logged in as admin user, check for the "Add a new recipe" link.
    $this->drupalGet('recipe');
    $this->assertLink('Add a new recipe', 0);
    // Logout and check that the add recipe link is inaccessible.
    $this->drupalLogout();
    $this->drupalGet('recipe');
    $this->assertNoLink('Add a new recipe');
    $this->drupalLogin($this->admin_user);

    // Check for the Recent Recipe (Latest recipes) box.
    $this->drupalGet('recipe');
    $this->assertText('Latest recipes');

    // Create a recipe node.
    $node_title = $this->randomName(16);
    $edit = array(
      'type' => 'recipe',
      'title' => $node_title,
      'recipe_source' => array(
        'value' => '',
      ),
      'recipe_yield' => 1,
      'recipe_yield_unit' => '',
      'recipe_description' => array(
        'value' => '',
      ),
      'recipe_instructions' => array(
        'value' => '',
      ),
      'recipe_notes' => array(
        'value' => '',
      ),
      'recipe_prep_time' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => 1,
          ),
        ),
      ),
      'recipe_cook_time' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => 1,
          ),
        ),
      ),
      'recipe_ingredient' => array(
        LANGUAGE_NONE => array(),
      ),
    );
    $this->drupalCreateNode($edit);

    // Check that the recipe title is displayed.
    $this->drupalGet('recipe');
    $this->assertLink($node_title, 0);

    // Change the title of the box and the number of node titles displayed.
    $recent_recipe_title = $this->randomName(16);
    $edit = array(
      'recipe_recent_box_title' => $recent_recipe_title,
      'recipe_recent_display' => 0,
    );
    $this->drupalPost('admin/config/content/recipe', $edit, t('Save configuration'));

    // Check that the recipe title is not displayed.
    $this->drupalGet('recipe');
    $this->assertText($recent_recipe_title);
    $this->assertNoLink($node_title);

    // Disable the Recent Recipe box.
    $edit = array(
      'recipe_recent_box_enable' => FALSE,
    );
    $this->drupalPost('admin/config/content/recipe', $edit, t('Save configuration'));

    // Check that the Recent Recipe box is disabled.
    $this->drupalGet('recipe');
    $this->assertNoText($recent_recipe_title);
    $this->assertNoLink($node_title);
  }
}

/**
 * Tests display of nodes in recipe lists for node access.
 */
class RecipeNodeAccessTestCase extends DrupalWebTestCase {
  protected $admin_user;
  protected $node_title;

  public static function getInfo() {
    return array(
      'name' => 'Recipe node access',
      'description' => 'Tests display of nodes in recipe lists for node access.',
      'group' => 'Recipe',
    );
  }

  public function setUp() {
    // Enable modules required for testing.
    parent::setUp(array('recipe', 'node_access_test'));

    // Create and log in the admin user with Recipe content permissions.
    $this->admin_user = $this->drupalCreateUser(array('create recipe content', 'edit own recipe content', 'administer blocks'));
    $this->drupalLogin($this->admin_user);

    // Set the variable to enable private nodes with node_access_test.
    node_access_rebuild();
    variable_set('node_access_test_private', TRUE);

    // Create a test recipe node.
    $this->node_title = $this->randomName(16);
    $edit = array(
      'title' => $this->node_title,
      'recipe_description[' . LANGUAGE_NONE . '][0][value]' => $this->randomName(16),
      'recipe_yield' => 1,
      'private' => TRUE,
    );
    $this->drupalPost('node/add/recipe', $edit, 'Save');

    // Enable the Newest Recipes and Recipe Summary blocks.
    $edit = array(
      "blocks[recipe_recent][region]" => 'sidebar_first',
    );
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
  }

  /**
   * Tests node_access for nodes displayed in recipe lists.
   */
  public function testRecentRecipeBoxNodeAccess() {
    // Logout and assert that the anonymous user can't access the node.
    $this->drupalLogout();
    $this->drupalGet('node/1');
    $this->assertResponse(403);
    // Assert that a link to the test recipe can't be seen at /recipe.
    $this->drupalGet('recipe');
    $this->assertNoLink($this->node_title);

    // Log in as the admin_user and set the recipe node as public.
    $this->drupalLogin($this->admin_user);
    $edit = array(
      'private' => FALSE,
    );
    $this->drupalPost('node/1/edit', $edit, 'Save');

    // Logout and assert that the anonymous user can access the node.
    $this->drupalLogout();
    $this->drupalGet('node/1');
    $this->assertResponse(200);
    // Logout and assert that two links to the test recipe can be seen at
    // /recipe. One should be from the /recipe page Recent Recipes box and the
    // other should be from the Latest Recipes block.
    $this->drupalGet('recipe');
    $this->assertLink($this->node_title, 0);
    $this->assertLink($this->node_title, 1);
  }
}

/**
 * Tests the single and multiple recipe import forms.
 */
class RecipeImportFormsTestCase extends RecipeWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Recipe import forms',
      'description' => 'Test the single and multiple recipe import forms',
      'group' => 'Recipe',
    );
  }

  /**
   * Test import a recipe in plain text format with the single import form.
   */
  public function testPlainTextSingleImport() {
    // Enter a recipe into the import form and preview it.
    $edit = array(
      'recipe_format' => 'recipe_plaintext_import',
      'recipe_import_text' => 'Salt water

Ingredients:
2 c water (cold)
1 T salt

Instructions:
Combine water and salt in a glass.

Stir.

Description:
Basic salt water.

Notes:
Do not consume!
',
    );
    $this->drupalPost('node/add/recipe/import', $edit, 'Preview');
    $this->assertText('Salt water');
    $this->assertText('2 c', 'Found ingredent 0 quantity and unit.');
    $this->assertText('water (cold)', 'Found ingredient 0 name and note.');
    $this->assertText('1 T', 'Found ingredient 1 quantity and unit.');
    $this->assertText('salt', 'Found ingredient 1 name.');
    $this->assertText('Instructions:
Combine water and salt in a glass.

Stir.

Description:
Basic salt water.

Notes:
Do not consume!', 'Found recipe instructions, description, and notes.');

    // Import the recipe into a node.
    $this->drupalPost('node/add/recipe/import', $edit, 'Import');
    $this->drupalGet('node/1');
    $this->assertText('Salt water');
    $this->assertText('2 c', 'Found ingredent 0 quantity and unit.');
    $this->assertText('water (cold)', 'Found ingredient 0 name and note.');
    $this->assertText('1 T', 'Found ingredient 1 quantity and unit.');
    $this->assertText('salt', 'Found ingredient 1 name.');
    $this->assertText('Combine water and salt in a glass.', 'Found the first instruction.');
    $this->assertText('Stir.', 'Found the second instruction.');
    $this->assertText('Basic salt water.', 'Found the recipe description.');
    $this->assertText('Do not consume!', 'Found the recipe notes.');
  }

  /**
   * Test import a recipe in MasterCook4 format with the single import form.
   */
  public function testMasterCook4SingleImport() {
    // Enter a recipe into the import form and preview it.
    $edit = array(
      'recipe_format' => 'recipe_mastercook4_import_single',
      'recipe_import_text' => '* Exported from MasterCook *

                     Salt water

Recipe By     : John Doe
Serving Size  : 1    Preparation Time : 0:05
Categories    :
  Amount  Measure       Ingredient -- Preparation Method
--------  ------------  --------------------------------
       2          cups  water -- cold
       1    tablespoon  salt

Combine water and salt in a glass.

Stir.

                                    - - - - - - - - - - - - - - - - - - -

NOTES : Do not consume!',
    );
    $this->drupalPost('node/add/recipe/import', $edit, 'Preview');
    $this->assertText('Salt water');
    $this->assertText('2 c', 'Found ingredent 0 quantity and unit.');
    $this->assertText('water (cold)', 'Found ingredient 0 name and note.');
    $this->assertText('1 T', 'Found ingredient 1 quantity and unit.');
    $this->assertText('salt', 'Found ingredient 1 name.');
    $this->assertText('Combine water and salt in a glass.

Stir.', 'Found recipe instructions.');
    $this->assertText('Do not consume!', 'Found recipe notes.');

    // Import the recipe into a node.
    $this->drupalPost('node/add/recipe/import', $edit, 'Import');
    $this->drupalGet('node/1');
    $this->assertText('Salt water');
    $this->assertText('2 c', 'Found ingredent 0 quantity and unit.');
    $this->assertText('water (cold)', 'Found ingredient 0 name and note.');
    $this->assertText('1 T', 'Found ingredient 1 quantity and unit.');
    $this->assertText('salt', 'Found ingredient 1 name.');
    $this->assertText('Combine water and salt in a glass.', 'Found the first instruction.');
    $this->assertText('Stir.', 'Found the second instruction.');
    $this->assertText('Do not consume!', 'Found the recipe notes.');
  }

  /**
   * Test import recipes in MasterCook4 format with the multiple import form.
   */
  public function testMasterCook4MultipleImport() {
    // Check for the MasterCook4 form link on the bulk import page.
    $this->drupalGet('admin/structure/recipe/import_multi');
    $this->assertLink('MasterCook4', 0);

    // Import the MasterCook4 test file using the multiple import form.
    $edit = array(
      'files[recipe_import_file]' => drupal_get_path('module', 'recipe') . '/tests/recipe_mastercook4_test.mxp',
    );
    $this->drupalPost('admin/structure/recipe/import_multi/mastercook4', $edit, t('Import'));
    $this->assertText(t('The attached file was successfully uploaded'));

    // Verify that the first recipe was imported correctly.
    $this->drupalGet('node/1');
    $this->assertText('Salt water');
    $this->assertText('John Doe', 'Found the recipe source.');
    $this->assertText('2 c', 'Found ingredent 0 quantity and unit.');
    $this->assertText('water (cold)', 'Found ingredient 0 name and note.');
    $this->assertText('1 T', 'Found ingredient 1 quantity and unit.');
    $this->assertText('salt', 'Found ingredient 1 name.');
    $this->assertText('Combine water and salt in a glass.', 'Found the first instruction.');
    $this->assertText('Stir.', 'Found the second instruction.');
    $this->assertText('Do not consume!', 'Found the recipe notes.');

    // Verify that the second recipe was imported correctly.
    $this->drupalGet('node/2');
    $this->assertText('Hard-boiled eggs');
    $this->assertText('Jane Doe', 'Found the recipe source.');
    $this->assertText('2 q', 'Found ingredent 0 quantity and unit.');
    $this->assertText('water (hot)', 'Found ingredient 0 name and note.');
    $this->assertRaw('<span class="quantity-unit" property="schema:amount"> 4 </span>', 'Found ingredient 1 quantity with no unit.');
    $this->assertText('eggs', 'Found ingredient 1 name.');
    $this->assertText('Boil the water.', 'Found the first instruction.');
    $this->assertText('Put the eggs in the boiling water for 5 minutes.', 'Found the second instruction.');
    $this->assertText('Allow the eggs to cool.', 'Found the third instruction.');
    $this->assertText('Break the shells and consume.', 'Found the fourth instruction.');
  }

  /**
   * Test import recipes in recipeML format with the multiple import form.
   */
  public function testRecipeMLMultipleImport() {
    // Check for the recipeML form link on the bulk import page.
    $this->drupalGet('admin/structure/recipe/import_multi');
    $this->assertLink('recipeML', 0);

    // Import the recipeML test file using the multiple import form.
    $edit = array(
      'files[recipe_import_file]' => drupal_get_path('module', 'recipe') . '/tests/recipe_recipeml_test.xml',
    );
    $this->drupalPost('admin/structure/recipe/import_multi/recipeml', $edit, t('Import'));
    $this->assertText(t('The attached file was successfully uploaded'));

    // Verify that the first recipe was imported correctly.
    $this->drupalGet('node/1');
    $this->assertText('Salt water');
    $this->assertFieldById('edit-custom-yield', 1, 'Found the recipe yield in the custom yield form.');
    $this->assertText('Servings', 'Found the recipe yield unit.');
    $this->assertText('John Doe', 'Found the recipe source.');
    $this->assertText('2 c', 'Found ingredent 0 quantity and unit.');
    $this->assertText('water (cold)', 'Found ingredient 0 name and note.');
    $this->assertText('1 T', 'Found ingredient 1 quantity and unit.');
    $this->assertText('salt', 'Found ingredient 1 name.');
    $this->assertText('Combine water and salt in a glass.', 'Found the first instruction.');
    $this->assertText('Stir.', 'Found the second instruction.');
    $this->assertText('Do not consume!', 'Found the recipe notes.');

    // Verify that the second recipe was imported correctly.
    $this->drupalGet('node/2');
    $this->assertText('Hard-boiled eggs');
    $this->assertFieldById('edit-custom-yield', 2, 'Found the recipe yield in the custom yield form.');
    $this->assertText('Servings', 'Found the recipe yield unit.');
    $this->assertText('Jane Doe', 'Found the recipe source.');
    $this->assertText('2 q', 'Found ingredent 0 quantity and unit.');
    $this->assertText('water (hot)', 'Found ingredient 0 name and note.');
    $this->assertRaw('<span class="quantity-unit" property="schema:amount"> 4 </span>', 'Found ingredient 1 quantity with no unit.');
    $this->assertText('eggs', 'Found ingredient 1 name.');
    $this->assertText('Boil the water.', 'Found the first instruction.');
    $this->assertText('Put the eggs in the boiling water for 5 minutes.', 'Found the second instruction.');
    $this->assertText('Allow the eggs to cool.', 'Found the third instruction.');
    $this->assertText('Break the shells and consume.', 'Found the fourth instruction.');
  }
}

/**
 * Tests isolated Recipe module functions.
 *
 * @see DrupalUnitTestCase
 */
class RecipeUnitTestCase extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Recipe unit tests',
      'description' => 'Test that Recipe functions work properly.',
      'group' => 'Recipe',
    );
  }

  function setUp() {
    drupal_load('module', 'recipe');
    parent::setUp();
  }

  /**
   * Test ingredient quantity conversion functions.
   */
  public function testIngredientQuantityConversion() {
    $quantities = array(
      // Test a couple of whole numbers.
      '1',
      '10',
      // Test a couple of mixed numbers.
      '1 1/2',
      '10 1/2',
      // Test the fractions which convert to repeating decimals that are
      // converted by recipe_ingredient_quantity_from_decimal().
      '1/3',
      '2/3',
      '1/6',
      '5/6',
      '1/9',
      '2/9',
      '4/9',
      '5/9',
      '7/9',
      '8/9',
      '1/12',
      '5/12',
      '7/12',
      '11/12',
    );

    foreach ($quantities as $quantity) {
      // Convert the fraction quantity to a decimal.
      $decimal = recipe_ingredient_quantity_from_fraction($quantity);
      // Convert the decimal quantity back to a fraction string.
      $fraction = recipe_ingredient_quantity_from_decimal($decimal);
      // Replace the '&frasl;' in the fraction string with '/'.
      $fraction = str_replace('&frasl;', '/', $fraction);
      // Verify the fraction result is the same as the original quantity.
      $this->assertEqual($quantity, $fraction);
    }
  }
}

/**
 * Tests the update path for Recipe 7.x-1.3 to 7.x-2.x.
 *
 * @see UpdatePathTestCase
 */
class RecipeUpdatePathTestCase extends UpdatePathTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Recipe update tests',
      'description' => 'Tests the update path for Recipe 7.x-1.3 to 7.x-2.x.',
      'group' => 'Recipe',
    );
  }

  public function setUp() {
    // Load the database dump files.
    $this->databaseDumpFiles = array(
      drupal_get_path('module', 'simpletest') . '/tests/upgrade/drupal-7.bare.standard_all.database.php.gz',
      drupal_get_path('module', 'recipe') . '/tests/upgrade/drupal-7.recipe.database.php',
    );
    parent::setUp();

    $this->uninstallModulesExcept(array('field', 'field_sql_storage', 'text', 'number', 'recipe'));
  }

  /**
   * Tests the Recipe field migration.
   */
  public function testRecipeFieldMigration() {
    // Perform the update.
    $this->assertTrue($this->performUpgrade(), 'The update was completed successfully.');

    // Check for the migrated recipe fields.
    $node = node_load(1);
    $this->assertEqual($node->recipe_description[LANGUAGE_NONE][0]['value'], 'Basic salt water.', 'The recipe description was migrated.');
    $this->assertEqual($node->recipe_description[LANGUAGE_NONE][0]['format'], 'filtered_html', 'The recipe description text format was set to filtered_html.');
    $this->assertEqual($node->recipe_instructions[LANGUAGE_NONE][0]['value'], "Combine water and salt in a glass.\r\n\r\nStir.", 'The recipe instructions was migrated.');
    $this->assertEqual($node->recipe_instructions[LANGUAGE_NONE][0]['format'], 'filtered_html', 'The recipe instructions text format was set to filtered_html.');
    $this->assertEqual($node->recipe_notes[LANGUAGE_NONE][0]['value'], "Do not consume!", 'The recipe notes was migrated.');
    $this->assertEqual($node->recipe_notes[LANGUAGE_NONE][0]['format'], 'filtered_html', 'The recipe notes text format was set to filtered_html.');
    $this->assertEqual($node->recipe_source[LANGUAGE_NONE][0]['value'], "John Doe", 'The recipe source was migrated.');
    $this->assertEqual($node->recipe_source[LANGUAGE_NONE][0]['format'], 'filtered_html', 'The recipe source text format was set to filtered_html.');
    $this->assertEqual($node->recipe_prep_time[LANGUAGE_NONE][0]['value'], 1, 'The recipe preparation time was migrated.');
    $this->assertEqual($node->recipe_cook_time[LANGUAGE_NONE][0]['value'], 2, 'The recipe cooking time was migrated.');
    $this->assertEqual($node->recipe_ingredient[LANGUAGE_NONE][0]['iid'], 1, 'The first recipe ingredient reference was migrated.');
    $this->assertEqual($node->recipe_ingredient[LANGUAGE_NONE][0]['quantity'], 2, 'The first recipe ingredient quantity was migrated.');
    $this->assertEqual($node->recipe_ingredient[LANGUAGE_NONE][0]['unit_key'], 'cup', 'The first recipe ingredient unit_key was migrated.');
    $this->assertEqual($node->recipe_ingredient[LANGUAGE_NONE][0]['note'], 'cold', 'The first recipe ingredient note was migrated.');
    $this->assertEqual($node->recipe_ingredient[LANGUAGE_NONE][1]['iid'], 2, 'The second recipe ingredient reference was migrated.');
    $this->assertEqual($node->recipe_ingredient[LANGUAGE_NONE][1]['quantity'], 1, 'The second recipe ingredient quantity was migrated.');
    $this->assertEqual($node->recipe_ingredient[LANGUAGE_NONE][1]['unit_key'], 'tablespoon', 'The second recipe ingredient unit_key was migrated.');
    $this->assertEqual($node->recipe_ingredient[LANGUAGE_NONE][1]['note'], '', 'The second recipe ingredient note was migrated.');
  }
}
